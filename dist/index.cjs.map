{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { Redis } from \"ioredis\";\nimport { AdapterFunction, SessionAdapter, SessionSchema } from \"lucia-auth\";\n\ntype Params = {\n  session: Redis;\n  userSession: Redis;\n};\n\nconst adapter =\n  ({\n    session: sessionRedis,\n    userSession: userSessionRedis,\n  }: Params): AdapterFunction<SessionAdapter> =>\n  () => ({\n    getSession: async (sessionId: string) => {\n      const sessionData = await sessionRedis.get(sessionId);\n      return sessionData ? (JSON.parse(sessionData) as SessionSchema) : null;\n    },\n    getSessionsByUserId: async (userId: string) => {\n      const sessionIds = await userSessionRedis.lrange(userId, 0, -1);\n      const sessions = await Promise.all(\n        sessionIds.map(async (sessionId) => {\n          const sessionData = await sessionRedis.get(sessionId);\n          return sessionData ? JSON.parse(sessionData) : null;\n        })\n      );\n      return sessions.filter(\n        (session): session is SessionSchema => session !== null\n      );\n    },\n    setSession: async (session) => {\n      await Promise.all([\n        userSessionRedis.set(session.user_id, session.id),\n        sessionRedis.set(\n          session.id,\n          JSON.stringify(session),\n          \"EX\",\n          Math.floor(Number(session.idle_expires) / 1000)\n        ),\n      ]);\n    },\n    deleteSession: async (...sessionIds: string[]) => {\n      const targetSessionIds = await Promise.all(\n        sessionIds.map(async (sessionId) => sessionRedis.get(sessionId))\n      );\n      const sessions = targetSessionIds\n        .filter((sessionId): sessionId is string => sessionId !== null)\n        .map((sessionId) => JSON.parse(sessionId) as SessionSchema);\n      await Promise.all([\n        ...sessionIds.map((sessionId) => sessionRedis.del(sessionId)),\n        ...sessions.map((session) => userSessionRedis.del(session.user_id)),\n      ]);\n    },\n    deleteSessionsByUserId: async (userId: string) => {\n      const sessionIds = await userSessionRedis.lrange(userId, 0, -1);\n      await Promise.all([\n        ...sessionIds.map((sessionId) => sessionRedis.del(sessionId)),\n        userSessionRedis.del(userId),\n      ]);\n    },\n  });\n\nexport default adapter;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,IAAM,UACJ,CAAC;AAAA,EACC,SAAS;AAAA,EACT,aAAa;AACf,MACA,OAAO;AAAA,EACL,YAAY,OAAO,cAAsB;AACvC,UAAM,cAAc,MAAM,aAAa,IAAI,SAAS;AACpD,WAAO,cAAe,KAAK,MAAM,WAAW,IAAsB;AAAA,EACpE;AAAA,EACA,qBAAqB,OAAO,WAAmB;AAC7C,UAAM,aAAa,MAAM,iBAAiB,OAAO,QAAQ,GAAG,EAAE;AAC9D,UAAM,WAAW,MAAM,QAAQ;AAAA,MAC7B,WAAW,IAAI,OAAO,cAAc;AAClC,cAAM,cAAc,MAAM,aAAa,IAAI,SAAS;AACpD,eAAO,cAAc,KAAK,MAAM,WAAW,IAAI;AAAA,MACjD,CAAC;AAAA,IACH;AACA,WAAO,SAAS;AAAA,MACd,CAAC,YAAsC,YAAY;AAAA,IACrD;AAAA,EACF;AAAA,EACA,YAAY,OAAO,YAAY;AAC7B,UAAM,QAAQ,IAAI;AAAA,MAChB,iBAAiB,IAAI,QAAQ,SAAS,QAAQ,EAAE;AAAA,MAChD,aAAa;AAAA,QACX,QAAQ;AAAA,QACR,KAAK,UAAU,OAAO;AAAA,QACtB;AAAA,QACA,KAAK,MAAM,OAAO,QAAQ,YAAY,IAAI,GAAI;AAAA,MAChD;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,eAAe,UAAU,eAAyB;AAChD,UAAM,mBAAmB,MAAM,QAAQ;AAAA,MACrC,WAAW,IAAI,OAAO,cAAc,aAAa,IAAI,SAAS,CAAC;AAAA,IACjE;AACA,UAAM,WAAW,iBACd,OAAO,CAAC,cAAmC,cAAc,IAAI,EAC7D,IAAI,CAAC,cAAc,KAAK,MAAM,SAAS,CAAkB;AAC5D,UAAM,QAAQ,IAAI;AAAA,MAChB,GAAG,WAAW,IAAI,CAAC,cAAc,aAAa,IAAI,SAAS,CAAC;AAAA,MAC5D,GAAG,SAAS,IAAI,CAAC,YAAY,iBAAiB,IAAI,QAAQ,OAAO,CAAC;AAAA,IACpE,CAAC;AAAA,EACH;AAAA,EACA,wBAAwB,OAAO,WAAmB;AAChD,UAAM,aAAa,MAAM,iBAAiB,OAAO,QAAQ,GAAG,EAAE;AAC9D,UAAM,QAAQ,IAAI;AAAA,MAChB,GAAG,WAAW,IAAI,CAAC,cAAc,aAAa,IAAI,SAAS,CAAC;AAAA,MAC5D,iBAAiB,IAAI,MAAM;AAAA,IAC7B,CAAC;AAAA,EACH;AACF;AAEF,IAAO,cAAQ;","names":[]}